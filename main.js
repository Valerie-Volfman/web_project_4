!function(){"use strict";var e={562:function(e,t,n){e.exports=n.p+"93d4395eb12af67dc0ab.svg"}},t={};function n(s){var o=t[s];if(void 0!==o)return o.exports;var r=t[s]={exports:{}};return e[s](r,r.exports,n),r.exports}n.d=function(e,t){for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="";var s={};!function(){n.d(s,{O_:function(){return I},An:function(){return q}});class e{constructor(e,t,n){this._name=e.name,this._link=e.link,this._template=document.querySelector(t).content.querySelector(".card"),this._onImageClick=n}_addEventisteners(){this._element.querySelector(".card__delete-button").addEventListener("click",(e=>{e.stopPropagation(),this._element.remove()})),this._element.querySelector(".card__like").addEventListener("click",(e=>{e.target.classList.toggle("card__like_non-active")})),this._element.querySelector(".card__picture").addEventListener("click",(()=>{q.style.backgroundImage='url("'.concat(this._link,'")'),I.textContent=this._name,this._handlePreviewPicture()}))}_handlePreviewPicture(){this._onImageClick({link:this.link,name:this.name})}render(){return this._element=this._template.cloneNode(!0),this._element.querySelector(".card__name").textContent=this._name,this._element.querySelector(".card__picture").style.backgroundImage='url("'.concat(this._link,'")'),this._addEventisteners(),this._element}}var t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_showInputError(e,t){const n=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),n.textContent=t,n.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_toggleButtonState(e,t){e.some((e=>!e.validity.valid))?(t.classList.add(this._inactiveButtonClass),t.disabled=!0):(t.classList.remove(this._inactiveButtonClass),t.disabled=!1)}checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._inputSelector)],this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this.checkInputValidity(e),this._toggleButtonState(this._inputElements,this._buttonElement)}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._toggleButtonState(this._inputElements,this._buttonElement),this._inputElements.forEach((e=>{this._hideInputError(e)}))}};function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n(562);class r{constructor(e){o(this,"close",(()=>{this._popup.classList.remove("popup__is-opened"),document.removeEventListener("keydown",this._handleEscClose)})),o(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),this._popup=document.querySelector(e)}setEventListeners(){this._popup.querySelector(".popup__close-button").addEventListener("click",(e=>{e.target.classList.contains("popup__is-opened")&&this.close(),e.target.classList.contains("popup__close-button")&&this.close()})),this._popup.addEventListener("mousedown",(e=>{this._popup.classList.add("popup__is-opened"),e.target.classList.contains("popup__is-opened")&&(this._popup.classList.remove("popup__is-opened"),document.removeEventListener("mousedown",this._handleEscClose))}))}open(){this._popup.classList.add("popup__is-opened"),document.addEventListener("keydown",this._handleEscClose)}}class i extends r{constructor(e,t){super(e),this._formElement=this._popup.querySelector(".popup__form"),this._handleFormSubmit=t}_getInputValues(){const e=this._formElement.querySelectorAll(".popup__input"),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._formElement.reset()}))}}const p={formElement:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},a=document.querySelector(".places__cards"),l=document.querySelector(".profile__value_type_name"),u=document.querySelector(".profile__value_type_profession"),c=document.querySelector(".popup__input_type_name"),_=document.querySelector(".popup__input_type_profession"),d=document.querySelector(".popup_type_edit-profile"),m=document.querySelector(".popup_type_add-card"),h=document.querySelector(".popup_type_image-popup"),f=new class extends r{constructor(e){var t,n;super(e),n=e=>{let{link:t,name:n}=e;this.name=n,this.link='url("'.concat(t,'")'),super.open()},(t="open")in this?Object.defineProperty(this,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):this.open=n}}(".popup_type_image-popup");f.setEventListeners();const v=document.querySelector(".profile__edit-button"),E=document.querySelector(".profile__add-button"),y=new t(p,d),b=new t(p,m);y.enableValidation(),b.enableValidation();const g=new class{constructor(e,t){let{items:n,renderer:s}=e;this._items=n,this._renderer=s,this._container=t}addItem(e){this._container.prepend(e)}render(){this._items.forEach((e=>{this._renderer(e)}))}}({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:e=>{const t=L(e).render();g.addItem(t)}},a);function L(t){return new e(t,"#card-template",f.open)}g.render();const S=new i(".popup_type_add-card",(function(){const e=L({link:S._getInputValues().popupInputCardLink,name:S._getInputValues().popupInputCardTitle}).render();g.addItem(e),S.close()}));S.setEventListeners();const k=new class{constructor(e){let{profileName:t,profileProfession:n}=e;this._profileName=t,this._profileProfession=n}getUserInfo(){return{name:this._profileName.textContent,profession:this._profileProfession.textContent}}setUserInfo(e){this._profileName.textContent=e.popupInputName,this._profileProfession.textContent=e.popupInputProfession}}({profileName:l,profileProfession:u}),C=new i(".popup_type_edit-profile",(function(){k.setUserInfo(C._getInputValues()),C.close()}));C.setEventListeners(),v.addEventListener("click",(()=>{c.value=l.textContent,_.value=u.textContent,C.open()})),E.addEventListener("click",(()=>{b.resetValidation(),S.open()}));const q=h.querySelector(".popup__image"),I=h.querySelector(".popup__image-title")}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Qm9FLEVBQWtCcEYsY0FDL0MsdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Qb3B1cHdpdGhpbWFnZS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsIl9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7IiwiaW1wb3J0IHsgcG9wdXBQaWMsIHBvcHVwSW1hZ2VUaXRsZSB9IGZyb20gXCIuLi9wYWdlcy9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkIHtcbiAgY29uc3RydWN0b3IoY2FyZERhdGEsIGNhcmRUZW1wbGF0ZVNlbGVjdG9yLCBvbkltYWdlQ2xpY2spIHtcbiAgICB0aGlzLl9uYW1lID0gY2FyZERhdGEubmFtZTtcbiAgICB0aGlzLl9saW5rID0gY2FyZERhdGEubGluaztcblxuICAgIHRoaXMuX3RlbXBsYXRlID0gZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKGNhcmRUZW1wbGF0ZVNlbGVjdG9yKVxuICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpO1xuXG4gICAgdGhpcy5fb25JbWFnZUNsaWNrID0gb25JbWFnZUNsaWNrO1xuICB9XG5cbiAgX2FkZEV2ZW50aXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fZWxlbWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fZGVsZXRlLWJ1dHRvblwiKVxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XG4gICAgICB9KTtcblxuICAgIHRoaXMuX2VsZW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2VcIilcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2dCkgPT4ge1xuICAgICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoXCJjYXJkX19saWtlX25vbi1hY3RpdmVcIik7XG4gICAgICB9KTtcblxuICAgIHRoaXMuX2VsZW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX3BpY3R1cmVcIilcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBwb3B1cFBpYy5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKFwiJHt0aGlzLl9saW5rfVwiKWA7XG4gICAgICAgIHBvcHVwSW1hZ2VUaXRsZS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XG4gICAgICAgIHRoaXMuX2hhbmRsZVByZXZpZXdQaWN0dXJlKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIF9oYW5kbGVQcmV2aWV3UGljdHVyZSgpIHtcbiAgICB0aGlzLl9vbkltYWdlQ2xpY2soeyBsaW5rOiB0aGlzLmxpbmssIG5hbWU6IHRoaXMubmFtZSB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gdGhpcy5fdGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpO1xuICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19uYW1lXCIpLnRleHRDb250ZW50ID0gdGhpcy5fbmFtZTtcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcIi5jYXJkX19waWN0dXJlXCJcbiAgICApLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGB1cmwoXCIke3RoaXMuX2xpbmt9XCIpYDtcblxuICAgIHRoaXMuX2FkZEV2ZW50aXN0ZW5lcnMoKTtcblxuICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICB9XG59XG4iLCJjbGFzcyBGb3JtVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGZvcm1FbGVtZW50KSB7XG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IHNldHRpbmdzLmlucHV0U2VsZWN0b3I7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBzZXR0aW5ncy5zdWJtaXRCdXR0b25TZWxlY3RvcjtcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcztcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBzZXR0aW5ncy5pbnB1dEVycm9yQ2xhc3M7XG4gICAgdGhpcy5fZXJyb3JDbGFzcyA9IHNldHRpbmdzLmVycm9yQ2xhc3M7XG5cbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xuICB9XG5cbiAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgdmFsaWRhdGlvbk1lc3NhZ2UpIHtcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXG4gICAgKTtcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IHZhbGlkYXRpb25NZXNzYWdlO1xuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xuICB9XG5cbiAgX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBgIyR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcbiAgICApO1xuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcbiAgfVxuXG4gIF90b2dnbGVCdXR0b25TdGF0ZShpbnB1dEVsZW1lbnRzLCBidXR0b25FbGVtZW50KSB7XG4gICAgY29uc3QgaGFzSW52YWxpZElucHV0ID0gaW5wdXRFbGVtZW50cy5zb21lKFxuICAgICAgKGlucHV0RWxlbWVudCkgPT4gIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZFxuICAgICk7XG4gICAgaWYgKGhhc0ludmFsaWRJbnB1dCkge1xuICAgICAgYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgICAgYnV0dG9uRWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICAgIGJ1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBjaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KSB7XG4gICAgaWYgKGlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCkge1xuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9pbnB1dEVsZW1lbnRzID0gW1xuICAgICAgLi4udGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9pbnB1dFNlbGVjdG9yKSxcbiAgICBdO1xuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3JcbiAgICApO1xuXG4gICAgdGhpcy5faW5wdXRFbGVtZW50cy5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLmNoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSh0aGlzLl9pbnB1dEVsZW1lbnRzLCB0aGlzLl9idXR0b25FbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcbiAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgcmVzZXRWYWxpZGF0aW9uKCkge1xuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKHRoaXMuX2lucHV0RWxlbWVudHMsIHRoaXMuX2J1dHRvbkVsZW1lbnQpO1xuICAgIHRoaXMuX2lucHV0RWxlbWVudHMuZm9yRWFjaCgoaW5wdXRTZWxlY3RvcikgPT4ge1xuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRTZWxlY3Rvcik7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9ybVZhbGlkYXRvcjtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgIHRoaXMuX3BvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IGNsb3NlUG9wdXBCdXR0b24gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19jbG9zZS1idXR0b25cIik7XG4gICAgY2xvc2VQb3B1cEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2dCkgPT4ge1xuICAgICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicG9wdXBfX2lzLW9wZW5lZFwiKSkge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9XG4gICAgICBpZiAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJwb3B1cF9fY2xvc2UtYnV0dG9uXCIpKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGV2dCkgPT4ge1xuICAgICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZChcInBvcHVwX19pcy1vcGVuZWRcIik7XG4gICAgICBpZiAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJwb3B1cF9faXMtb3BlbmVkXCIpKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoXCJwb3B1cF9faXMtb3BlbmVkXCIpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG9wZW4oKSB7XG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZChcInBvcHVwX19pcy1vcGVuZWRcIik7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICB9XG5cbiAgY2xvc2UgPSAoKSA9PiB7XG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LnJlbW92ZShcInBvcHVwX19pcy1vcGVuZWRcIik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICB9O1xuXG4gIF9oYW5kbGVFc2NDbG9zZSA9IChldnQpID0+IHtcbiAgICBpZiAoZXZ0LmtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0KSB7XG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5fZm9ybUVsZW1lbnQgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19mb3JtXCIpO1xuICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQgPSBoYW5kbGVGb3JtU3VibWl0O1xuICB9XG5cbiAgX2dldElucHV0VmFsdWVzKCkge1xuICAgIGNvbnN0IGlucHV0TGlzdCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucG9wdXBfX2lucHV0XCIpO1xuICAgIGNvbnN0IGZvcm1WYWx1ZXMgPSB7fTtcbiAgICBpbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgIGZvcm1WYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gZm9ybVZhbHVlcztcbiAgfVxuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQodGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKSk7XG5cbiAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LnJlc2V0KCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImV4cG9ydCBjb25zdCBpbml0aWFsQ2FyZHMgPSBbXG4gICAge1xuICAgICAgbmFtZTogXCJZb3NlbWl0ZSBWYWxsZXlcIixcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUveW9zZW1pdGUuanBnXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBcIkxha2UgTG91aXNlXCIsXG4gICAgICBsaW5rOiBcImh0dHBzOi8vY29kZS5zMy55YW5kZXgubmV0L3dlYi1jb2RlL2xha2UtbG91aXNlLmpwZ1wiLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogXCJCYWxkIE1vdW50YWluc1wiLFxuICAgICAgbGluazogXCJodHRwczovL2NvZGUuczMueWFuZGV4Lm5ldC93ZWItY29kZS9iYWxkLW1vdW50YWlucy5qcGdcIixcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwiTGF0ZW1hclwiLFxuICAgICAgbGluazogXCJodHRwczovL2NvZGUuczMueWFuZGV4Lm5ldC93ZWItY29kZS9sYXRlbWFyLmpwZ1wiLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogXCJWYW5vaXNlIE5hdGlvbmFsIFBhcmtcIixcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvdmFub2lzZS5qcGdcIixcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwiTGFnbyBkaSBCcmFpZXNcIixcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvbGFnby5qcGdcIixcbiAgICB9LFxuICBdO1xuXG4gIGV4cG9ydCBjb25zdCBwYWdlU2V0dGluZ3MgPSB7XG4gICAgZm9ybUVsZW1lbnQ6IFwiLnBvcHVwX19mb3JtXCIsXG4gICAgaW5wdXRTZWxlY3RvcjogXCIucG9wdXBfX2lucHV0XCIsXG4gICAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLnBvcHVwX19zYXZlLWJ1dHRvblwiLFxuICAgIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwicG9wdXBfX3NhdmUtYnV0dG9uX2Rpc2FibGVkXCIsXG4gICAgaW5wdXRFcnJvckNsYXNzOiBcInBvcHVwX19pbnB1dF90eXBlX2Vycm9yXCIsXG4gICAgZXJyb3JDbGFzczogXCJwb3B1cF9fZXJyb3JfdmlzaWJsZVwiLFxuICB9OyIsImltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcbmltcG9ydCBcIi4uL3BhZ2VzL2luZGV4LmNzc1wiO1xuaW1wb3J0IGxvZ28gZnJvbSBcIi4uL2ltYWdlcy9Mb2dvLnN2Z1wiO1xuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwd2l0aGltYWdlLmpzXCI7XG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcbmltcG9ydCB7IGluaXRpYWxDYXJkcywgcGFnZVNldHRpbmdzIH0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xuXG4vKipXcmFwcGVycyAqL1xuZXhwb3J0IGNvbnN0IHBsYWNlc0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBsYWNlc19fY2FyZHNcIik7XG5cbi8qKkRPTSBlbGVtZW50cyAqL1xuXG5leHBvcnQgY29uc3QgY2FyZFRlbXBsYXRlU2VsZWN0b3IgPSBcIiNjYXJkLXRlbXBsYXRlXCI7XG5leHBvcnQgY29uc3QgcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX3ZhbHVlX3R5cGVfbmFtZVwiKTtcbmV4cG9ydCBjb25zdCBwcm9maWxlUHJvZmVzc2lvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gIFwiLnByb2ZpbGVfX3ZhbHVlX3R5cGVfcHJvZmVzc2lvblwiXG4pO1xuZXhwb3J0IGNvbnN0IHBvcHVwSW5wdXROYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9faW5wdXRfdHlwZV9uYW1lXCIpO1xuXG5leHBvcnQgY29uc3QgcG9wdXBJbnB1dFByb2Zlc3Npb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi5wb3B1cF9faW5wdXRfdHlwZV9wcm9mZXNzaW9uXCJcbik7XG5cbi8qKlBvcHVwcyAqL1xuZXhwb3J0IGNvbnN0IHBvcHVwRWRpdFByb2ZpbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi5wb3B1cF90eXBlX2VkaXQtcHJvZmlsZVwiXG4pO1xuZXhwb3J0IGNvbnN0IHBvcHVwQWRkQ2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfdHlwZV9hZGQtY2FyZFwiKTtcbmV4cG9ydCBjb25zdCBpbWFnZVBvcHVwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gIFwiLnBvcHVwX3R5cGVfaW1hZ2UtcG9wdXBcIlxuKTtcbmV4cG9ydCBjb25zdCBpbWFnZVBvcHVwID0gbmV3IFBvcHVwV2l0aEltYWdlKFwiLnBvcHVwX3R5cGVfaW1hZ2UtcG9wdXBcIik7XG5pbWFnZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbi8qKkJ1dHRvbnMgKi9cbmNvbnN0IGVkaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2VkaXQtYnV0dG9uXCIpO1xuY29uc3QgYWRkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hZGQtYnV0dG9uXCIpO1xuXG4vKipWYWxpZGF0b3JzICovXG5leHBvcnQgY29uc3QgZWRpdEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihcbiAgcGFnZVNldHRpbmdzLFxuICBwb3B1cEVkaXRQcm9maWxlXG4pO1xuZXhwb3J0IGNvbnN0IGFkZEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihwYWdlU2V0dGluZ3MsIHBvcHVwQWRkQ2FyZCk7XG5cbmVkaXRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcbmFkZEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuXG4vKipUaGlzIGlzIGEgZGVzY3JpcHRpb24gb2YgdGhlIG5ldyBTZWN0aW9uIGZ1bmN0aW9uLiAqL1xuZXhwb3J0IGNvbnN0IGNhcmRMaXN0ID0gbmV3IFNlY3Rpb24oXG4gIHtcbiAgICBpdGVtczogaW5pdGlhbENhcmRzLFxuICAgIHJlbmRlcmVyOiAoaXRlbSkgPT4ge1xuICAgICAgY29uc3QgY2FyZCA9IGNyZWF0ZUNhcmQoaXRlbSkucmVuZGVyKCk7XG5cbiAgICAgIGNhcmRMaXN0LmFkZEl0ZW0oY2FyZCk7XG4gICAgfSxcbiAgfSxcbiAgcGxhY2VzTGlzdFxuKTtcbmNhcmRMaXN0LnJlbmRlcigpO1xuXG4vKipUaGlzIGlzIGEgZGVzY3JpcHRpb24gb2YgdGhlIGNyZWF0ZUNhcmQgZnVuY3Rpb24uICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FyZChjYXJkRWxlbWVudCkge1xuICByZXR1cm4gbmV3IENhcmQoY2FyZEVsZW1lbnQsIGNhcmRUZW1wbGF0ZVNlbGVjdG9yLCBpbWFnZVBvcHVwLm9wZW4pO1xufVxuXG4vKipSZXByZXNlbnRzIEFkZENhcmRQb3B1cCAqL1xuZXhwb3J0IGNvbnN0IGFkZENhcmRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxuICBcIi5wb3B1cF90eXBlX2FkZC1jYXJkXCIsXG4gIGhhbmRsZUFkZENhcmRGb3JtU3VibWl0XG4pO1xuYWRkQ2FyZFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4vKipUaGlzIGlzIGEgZGVzY3JpcHRpb24gb2YgdGhlIGhhbmRsZUFkZENhcmRGb3JtU3VibWl0IGZ1bmN0aW9uLiAqL1xuZnVuY3Rpb24gaGFuZGxlQWRkQ2FyZEZvcm1TdWJtaXQoKSB7XG4gIGNvbnN0IG5ld0NhcmQgPSB7XG4gICAgbGluazogYWRkQ2FyZFBvcHVwLl9nZXRJbnB1dFZhbHVlcygpLnBvcHVwSW5wdXRDYXJkTGluayxcbiAgICBuYW1lOiBhZGRDYXJkUG9wdXAuX2dldElucHV0VmFsdWVzKCkucG9wdXBJbnB1dENhcmRUaXRsZSxcbiAgfTtcbiAgY29uc3QgY2FyZCA9IGNyZWF0ZUNhcmQobmV3Q2FyZCkucmVuZGVyKCk7XG4gIGNhcmRMaXN0LmFkZEl0ZW0oY2FyZCk7XG4gIGFkZENhcmRQb3B1cC5jbG9zZSgpO1xufVxuLyoqUmVwcmVzZW50cyBFZGl0UHJvZmlsZVBvcHVwICovXG5leHBvcnQgY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oeyBwcm9maWxlTmFtZSwgcHJvZmlsZVByb2Zlc3Npb24gfSk7XG5cbmV4cG9ydCBjb25zdCBlZGl0UHJvZmlsZVBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXG4gIFwiLnBvcHVwX3R5cGVfZWRpdC1wcm9maWxlXCIsXG4gIGhhbmRsZVByb2ZpbGVGb3JtU3VibWl0XG4pO1xuZWRpdFByb2ZpbGVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuXG4vKipUaGlzIGlzIGEgZGVzY3JpcHRpb24gb2YgdGhlIGhhbmRsZVByb2ZpbGVGb3JtU3VibWl0IGZ1bmN0aW9uLiAqL1xuZnVuY3Rpb24gaGFuZGxlUHJvZmlsZUZvcm1TdWJtaXQoKSB7XG4gIHVzZXJJbmZvLnNldFVzZXJJbmZvKGVkaXRQcm9maWxlUG9wdXAuX2dldElucHV0VmFsdWVzKCkpO1xuICBlZGl0UHJvZmlsZVBvcHVwLmNsb3NlKCk7XG59XG5cbi8qKlRoaXMgaXMgYSBkZXNjcmlwdGlvbiBvZiB0aGUgb3BlbmluZyBwb3B1cHMgZnVuY3Rpb25zLiAqL1xuZWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBwb3B1cElucHV0TmFtZS52YWx1ZSA9IHByb2ZpbGVOYW1lLnRleHRDb250ZW50O1xuICBwb3B1cElucHV0UHJvZmVzc2lvbi52YWx1ZSA9IHByb2ZpbGVQcm9mZXNzaW9uLnRleHRDb250ZW50O1xuICBlZGl0UHJvZmlsZVBvcHVwLm9wZW4oKTtcbn0pO1xuXG5hZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgYWRkRm9ybVZhbGlkYXRvci5yZXNldFZhbGlkYXRpb24oKTtcbiAgYWRkQ2FyZFBvcHVwLm9wZW4oKTtcbn0pO1xuXG5leHBvcnQgY29uc3QgcG9wdXBQaWMgPSBpbWFnZVBvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19pbWFnZVwiKTtcbmV4cG9ydCBjb25zdCBwb3B1cEltYWdlVGl0bGUgPSBpbWFnZVBvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi5wb3B1cF9faW1hZ2UtdGl0bGVcIlxuKTtcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xuICB9XG5cbiAgb3BlbiA9ICh7IGxpbmssIG5hbWUgfSkgPT4ge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5saW5rID0gYHVybChcIiR7bGlua31cIilgO1xuXG4gICAgc3VwZXIub3BlbigpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHsgaXRlbXMsIHJlbmRlcmVyIH0sIGNvbnRhaW5lcikge1xuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcblxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgfVxuXG4gIGFkZEl0ZW0oaXRlbSkge1xuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGl0ZW0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMuX2l0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xuICAgIH0pO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XG4gIGNvbnN0cnVjdG9yKHsgcHJvZmlsZU5hbWUsIHByb2ZpbGVQcm9mZXNzaW9uIH0pIHtcbiAgICB0aGlzLl9wcm9maWxlTmFtZSA9IHByb2ZpbGVOYW1lO1xuICAgIHRoaXMuX3Byb2ZpbGVQcm9mZXNzaW9uID0gcHJvZmlsZVByb2Zlc3Npb247XG4gIH1cblxuICBnZXRVc2VySW5mbygpIHtcbiAgICBjb25zdCB1c2VySW5mbyA9IHtcbiAgICAgIG5hbWU6IHRoaXMuX3Byb2ZpbGVOYW1lLnRleHRDb250ZW50LFxuICAgICAgcHJvZmVzc2lvbjogdGhpcy5fcHJvZmlsZVByb2Zlc3Npb24udGV4dENvbnRlbnQsXG4gICAgfTtcbiAgICByZXR1cm4gdXNlckluZm87XG4gIH1cblxuICBzZXRVc2VySW5mbyhwb3B1cElucHV0TmFtZSkge1xuICAgIHRoaXMuX3Byb2ZpbGVOYW1lLnRleHRDb250ZW50ID0gcG9wdXBJbnB1dE5hbWUucG9wdXBJbnB1dE5hbWU7XG4gICAgdGhpcy5fcHJvZmlsZVByb2Zlc3Npb24udGV4dENvbnRlbnQgPSBwb3B1cElucHV0TmFtZS5wb3B1cElucHV0UHJvZmVzc2lvbjtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInAiLCJDYXJkIiwiY29uc3RydWN0b3IiLCJjYXJkRGF0YSIsImNhcmRUZW1wbGF0ZVNlbGVjdG9yIiwib25JbWFnZUNsaWNrIiwidGhpcyIsIl9uYW1lIiwibmFtZSIsIl9saW5rIiwibGluayIsIl90ZW1wbGF0ZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnQiLCJfb25JbWFnZUNsaWNrIiwiX2FkZEV2ZW50aXN0ZW5lcnMiLCJfZWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInN0b3BQcm9wYWdhdGlvbiIsInJlbW92ZSIsImV2dCIsInRhcmdldCIsImNsYXNzTGlzdCIsInRvZ2dsZSIsInBvcHVwUGljIiwic3R5bGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJwb3B1cEltYWdlVGl0bGUiLCJ0ZXh0Q29udGVudCIsIl9oYW5kbGVQcmV2aWV3UGljdHVyZSIsInJlbmRlciIsImNsb25lTm9kZSIsInNldHRpbmdzIiwiZm9ybUVsZW1lbnQiLCJfaW5wdXRTZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9pbnB1dEVycm9yQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJfZXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJfZm9ybUVsZW1lbnQiLCJfc2hvd0lucHV0RXJyb3IiLCJpbnB1dEVsZW1lbnQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImVycm9yRWxlbWVudCIsImlkIiwiYWRkIiwiX2hpZGVJbnB1dEVycm9yIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiaW5wdXRFbGVtZW50cyIsImJ1dHRvbkVsZW1lbnQiLCJzb21lIiwidmFsaWRpdHkiLCJ2YWxpZCIsImRpc2FibGVkIiwiY2hlY2tJbnB1dFZhbGlkaXR5IiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiX2lucHV0RWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX2J1dHRvbkVsZW1lbnQiLCJmb3JFYWNoIiwiZW5hYmxlVmFsaWRhdGlvbiIsInByZXZlbnREZWZhdWx0IiwicmVzZXRWYWxpZGF0aW9uIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiX3BvcHVwIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9oYW5kbGVFc2NDbG9zZSIsImNsb3NlIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJjb250YWlucyIsIm9wZW4iLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsInN1cGVyIiwiX2hhbmRsZUZvcm1TdWJtaXQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJpbnB1dExpc3QiLCJmb3JtVmFsdWVzIiwiaW5wdXQiLCJ2YWx1ZSIsInJlc2V0IiwicGFnZVNldHRpbmdzIiwicGxhY2VzTGlzdCIsInByb2ZpbGVOYW1lIiwicHJvZmlsZVByb2Zlc3Npb24iLCJwb3B1cElucHV0TmFtZSIsInBvcHVwSW5wdXRQcm9mZXNzaW9uIiwicG9wdXBFZGl0UHJvZmlsZSIsInBvcHVwQWRkQ2FyZCIsImltYWdlUG9wdXBFbGVtZW50IiwiaW1hZ2VQb3B1cCIsImVkaXRCdXR0b24iLCJhZGRCdXR0b24iLCJlZGl0Rm9ybVZhbGlkYXRvciIsIkZvcm1WYWxpZGF0b3IiLCJhZGRGb3JtVmFsaWRhdG9yIiwiY2FyZExpc3QiLCJjb250YWluZXIiLCJpdGVtcyIsInJlbmRlcmVyIiwiX2l0ZW1zIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsImFkZEl0ZW0iLCJpdGVtIiwicHJlcGVuZCIsImNhcmQiLCJjcmVhdGVDYXJkIiwiY2FyZEVsZW1lbnQiLCJhZGRDYXJkUG9wdXAiLCJwb3B1cElucHV0Q2FyZExpbmsiLCJwb3B1cElucHV0Q2FyZFRpdGxlIiwidXNlckluZm8iLCJfcHJvZmlsZU5hbWUiLCJfcHJvZmlsZVByb2Zlc3Npb24iLCJnZXRVc2VySW5mbyIsInByb2Zlc3Npb24iLCJzZXRVc2VySW5mbyIsImVkaXRQcm9maWxlUG9wdXAiXSwic291cmNlUm9vdCI6IiJ9